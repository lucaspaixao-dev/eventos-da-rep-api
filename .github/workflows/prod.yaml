name: ci
on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'adopt'

      #      - name: Run Format code lint
      #        run: ./gradlew ktlintFormat
      #
      #      - name: Run Lint
      #        run: ./gradlew ktlintCheck

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Creating artifact
        run: mkdir production && cp build/libs/eventos-da-rep-api-0.1-all.jar production

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: GitHub_Actions-prd
          path: production

      #      - name: Login to Heroku Container registry
      #        env:
      #          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      #        run: heroku container:login
      #
      #      - name: Build and push
      #        env:
      #          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      #          HEROKU_APP_NAME: github-actions-example
      #        run: heroku plugins:install java && heroku create --no-remote && heroku deploy:jar production/eventos-da-rep-api-0.1-all.jar --app eventos-da-rep-api

      - name: ACTIONS_ALLOW_UNSECURE_COMMANDS
        id: ACTIONS_ALLOW_UNSECURE_COMMANDS
        run: echo 'ACTIONS_ALLOW_UNSECURE_COMMANDS=true' >> $GITHUB_ENV

      - name: 'Publish JAR'
        uses: actions/upload-artifact@v2-preview
        with:
          name: 'eventos-da-rep-api-0.1-all.jar'
          path: build/libs/*-all.jar

      - name: 'Write Config & Key Files'
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
          echo "${{secrets.VM_SSH_PUB_KEY}}" >> /home/runner/.oci/id_vm.pub

      - name: 'Install OCI CLI'
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL

      - name: 'Fix Config File Permissions'
        run: |
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/key.pem

      - name: 'Check Existing Instance'
        run: |
          echo "INSTANCE_OCID=$( \
            oci compute instance list \
            --lifecycle-state RUNNING \
            --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
            --display-name eventos-da-rep-prod \
            --query "data [0].id" \
            --raw-output \
          )" >> $GITHUB_ENV

      - name: 'Get Instance IP'
        run: |
          echo "INSTANCE_IP=$( \
            oci compute instance list-vnics \
            --instance-id ${{env.INSTANCE_OCID}} \
            --query 'data [0]."public-ip"' \
            --raw-output \
          )" >> $GITHUB_ENV
          echo Instance IP: ${{ env.INSTANCE_IP }}

      - name: 'Wait for SSH'
        run: |
          while ! nc -w5 -z ${{ env.INSTANCE_IP }} 22; do
                  sleep 5
                  echo "SSH not available..."
          done; echo "SSH ready!"

      - name: 'Stop App'
        uses: appleboy/ssh-action@master
        with:
          host: ${{env.INSTANCE_IP}}
          username: opc
          key: ${{secrets.VM_SSH_PRIVATE_KEY}}
          script: |
            pid=`ps aux | grep "[c]icd-demo.jar" | awk '{print $2}'`
            if [ "$pid" == "" ]; then
              echo "Process not found"
            else
              kill -9 $pid
            fi
            sudo mkdir -p /app

      - name: 'Push JAR'
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: opc
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          source: "build/libs/eventos-da-rep-api-0.1-all.jar"
          target: "app"
          strip_components: 2

      - name: 'Start App'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: opc
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            sudo mv ~/app/eventos-da-rep-api-0.1-all.jar /app/app.jar
            nohup java -jar /app/app.jar > output.$(date --iso).log 2>&1 &
